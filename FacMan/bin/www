#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('facman:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

/**
 * Tweet bot code.  Easier to stick it in here than trying to run a concurrent script.
 */
 var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
 var TwitterBot = require("node-twitterbot").TwitterBot;
 var bot = new TwitterBot("twitterbot.json");
 var weatherPayload = "";
 var weathermoji = "";
 var alertPayload = "";

// An hourly general weather update is tweeted.
 var genWeatherAction = bot.addAction("tweet", function(twitter, action, tweet) {
   var xhttp = new XMLHttpRequest();
   xhttp.onreadystatechange = function() {
     if (this.readyState == 4 && this.status == 200) {
       weatherPayload = JSON.parse(this.responseText);
       if(weatherPayload.weather) {
         if(weatherPayload.weather[0].main == "Clear") {
           weathermoji = " ‚òÄÔ∏è";
         }
         else if(weatherPayload.weather[0].main == "Clouds") {
           weathermoji = " ‚òÅÔ∏è";
         }
         else if(weatherPayload.weather[0].main == "Rain" || weatherPayload.weather[0].main == "Drizzle") {
           weathermoji = " üåßÔ∏è";
         }
         else if(weatherPayload.weather[0].main == "Thunderstorm") {
           weathermoji = " üå©Ô∏è";
         }
         else {
           weathermoji = "";
         }
         bot.tweet("Weather Report: " + weatherPayload.weather[0].main + weathermoji + " with a temperature of " + Math.round(parseInt(weatherPayload.main.temp) * (9/5) - 459.67) + "¬∞F");
       }
     }
   };
   xhttp.open("GET", "http://api.openweathermap.org/data/2.5/weather?zip=14623&APPID=26a0348ecbedeb0af1fbf314d9c0529f", true);
   xhttp.send();
 });
bot.now(genWeatherAction);

// Tweet alert if wind gets at or above 10mph (~4.5m/s).
var windAlertAction = bot.addAction("windAlert", function(twitter, action, tweet) {
  var xhttp = new XMLHttpRequest();
  xhttp.onreadystatechange = function() {
    if (this.readyState == 4 && this.status == 200) {
      alertPayload = JSON.parse(this.responseText);
      if(alertPayload.weather) {
        if(parseInt(alertPayload.wind.speed) >= 4.5) {
          bot.tweet("Alert! " + "Winds of " + alertPayload.wind.speed + "mph üå¨Ô∏è");
        }
      }
    }
  };
  xhttp.open("GET", "http://api.openweathermap.org/data/2.5/weather?zip=14623&APPID=26a0348ecbedeb0af1fbf314d9c0529f", true);
  xhttp.send();
});
bot.now(windAlertAction);

var tweetWeather = function() {
  bot.now(genWeatherAction);
};

var tweetWindAlert = function() {
  bot.now(windAlertAction);
};

setInterval(tweetWeather, 3600000); // 1000ms/second * 60 seconds/min * 60 min/hour = hourly tweet
setInterval(tweetWindAlert, 300000); // 1000ms/second * 60 seconds/min * 5 min = poll 5 minutes for wind and possibly tweet
